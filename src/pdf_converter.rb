# This file was auto-generated by jrubyfx-generator at 2013-03-09T03:25:47-06:00

require 'jrubyfx'
require "pdf_generator_service.rb"
require "progress_alert.rb"

class PDFConverterApplication < JRubyFX::Application
  def start(stage)
    with(stage, title: "PDFConverter")
    PDFConverterController.new("pdf_converter.fxml", stage)
    stage.show()
  end
end

class PDFConverterController
  include JRubyFX::Controller

  FXWorker = Java::javafx.concurrent.Worker

  # nodes with ruby method-like fx:ids may be accessed directly
  def initialize
    charsPerLine
    root_anchor
    text_list
    text_list.get_items.add("")
    current_file = Object.new

    @task = PDFGeneratorService.new

    preview_button.disableProperty.bind(@task.stateProperty.isNotEqualTo(FXWorker::State::READY))
  end

  on :openText do |event|
    dialog = file_chooser(:title => "Select text file to convert") do
      add_extension_filter("Text File (*.txt)")
    end
    file = dialog.showOpenDialog(stage)
    unless file == nil
      current_file = file
      remove_old_text()
      create_textflow_nodes(current_file.path)
    end
  end

  on :previewPDF do |event|

    prog_alert = ProgressAlert.new(@task)
    prog_alert.p_bar.progress_property.bind(@task.progress_property)
    root_anchor.children.add prog_alert
    prog_alert.translateX = (root_anchor.scene.width - prog_alert.pref_width)/2
    prog_alert.translateY = (root_anchor.scene.height - prog_alert.pref_height)/2

    remove_prog_alert = Proc.new do
      @task.reset()
      root_anchor.children.remove prog_alert
    end

    @task.setOnSucceeded(remove_prog_alert)
    @task.setOnCancelled(remove_prog_alert)
    @task.setOnFailed do
      @task.reset()
    end

    @task.start()
  end

  on :savePDF do |event|
    # TODO: Auto-generated event handler
    puts "Action event 'savePDF' called"
  end

  def create_textflow_nodes(file_path)
    File.open(file_path).each_line do |line|
      line_string = Java::java.lang.String.new(line).intern
      text_line = text(line_string, font: font('Courier New', 12))
      # flow = Java::javafx.scene.text.TextFlow.new(text_line)
      text_list.get_items.add(text_line)
    end
  end

  def remove_old_text
    text_list.get_items.remove(1, text_list.get_items.size())
  end

end

PDFConverterApplication.launch
